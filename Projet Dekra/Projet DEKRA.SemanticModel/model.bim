{
  "compatibilityLevel": 1550,
  "model": {
    "annotations": [
      {
        "name": "PBI_QueryOrder",
        "value": "[\"Car performance\",\"Brand\",\"Model\",\"Car Category\",\"Incomplete car data\",\"Table Mesure\"]"
      },
      {
        "name": "__PBI_TimeIntelligenceEnabled",
        "value": "1"
      },
      {
        "name": "PBIDesktopVersion",
        "value": "2.139.2054.0 (24.12)+334ca1c95b576cc53924655643b0d36f21caac55"
      },
      {
        "name": "PBI_ProTooling",
        "value": "[\"DevMode\"]"
      }
    ],
    "culture": "en-US",
    "cultures": [
      {
        "name": "en-US",
        "linguisticMetadata": {
          "content": {
            "Language": "en-US",
            "Version": "1.0.0"
          },
          "contentType": "json"
        }
      }
    ],
    "dataAccessOptions": {
      "legacyRedirects": true,
      "returnErrorValuesAsNull": true
    },
    "defaultPowerBIDataSourceVersion": "powerBI_V3",
    "relationships": [
      {
        "name": "AutoDetected_8fc6a869-9af9-4a6a-aa08-987054c820d6",
        "fromColumn": "ID Brand",
        "fromTable": "Model",
        "toColumn": "ID Brand",
        "toTable": "Brand"
      },
      {
        "name": "f1297951-be98-3650-2279-dd3378f3a373",
        "fromColumn": "ID Model",
        "fromTable": "Car performance",
        "toColumn": "ID Model",
        "toTable": "Model"
      },
      {
        "name": "AutoDetected_ca5ea055-9387-48a1-b8c4-0607ca626ef1",
        "fromColumn": "ID Class",
        "fromTable": "Car performance",
        "toColumn": "ID Class",
        "toTable": "Car Category"
      }
    ],
    "sourceQueryCulture": "fr-FR",
    "tables": [
      {
        "name": "Car performance",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Table"
          },
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          }
        ],
        "columns": [
          {
            "name": "Performance Indicator",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "double",
            "formatString": "0",
            "lineageTag": "4ea70573-706e-4c36-8729-d5742e408b63",
            "sourceColumn": "Performance Indicator",
            "summarizeBy": "sum"
          },
          {
            "name": "0-60 Sec",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "dataType": "double",
            "lineageTag": "0283cdf0-b523-452c-8c21-ead55a7d9e4d",
            "sourceColumn": "0-60 Sec",
            "summarizeBy": "sum"
          },
          {
            "name": "0-100 Sec",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "dataType": "double",
            "lineageTag": "99b6774c-16e5-44b4-9e69-b317f59f4738",
            "sourceColumn": "0-100 Sec",
            "summarizeBy": "sum"
          },
          {
            "name": "Top Speed",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "dataType": "double",
            "lineageTag": "e603d28a-3813-4042-8c88-afc68b8be56d",
            "sourceColumn": "Top Speed",
            "summarizeBy": "sum"
          },
          {
            "name": "60-0 Feet",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "dataType": "double",
            "lineageTag": "53011375-a27f-4f1b-9a52-0224c8c24bd4",
            "sourceColumn": "60-0 Feet",
            "summarizeBy": "sum"
          },
          {
            "name": "100-0 Feet",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "dataType": "double",
            "lineageTag": "a496606f-75a8-4cde-abb2-c9a30eb56353",
            "sourceColumn": "100-0 Feet",
            "summarizeBy": "sum"
          },
          {
            "name": "60mph g's",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "dataType": "double",
            "lineageTag": "668770d8-1f40-4c03-8bad-70f8e393049f",
            "sourceColumn": "60mph g's",
            "summarizeBy": "sum"
          },
          {
            "name": "100mph g's",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "dataType": "double",
            "lineageTag": "e47b034a-a3a2-4d71-978c-25c397fba991",
            "sourceColumn": "100mph g's",
            "summarizeBy": "sum"
          },
          {
            "name": "60-100 sec",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "dataType": "double",
            "lineageTag": "54047f65-b1f8-4fc5-84a0-31cf8df88544",
            "sourceColumn": "60-100 sec",
            "summarizeBy": "sum"
          },
          {
            "name": "ID Model",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "d7a48f38-5891-430c-bb2c-ca633c919dc7",
            "sourceColumn": "ID Model",
            "summarizeBy": "none"
          },
          {
            "name": "ID Brand",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "342c74a0-8021-463b-b817-1cdfc38732f0",
            "sourceColumn": "ID Brand",
            "summarizeBy": "none"
          },
          {
            "name": "ID Class",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "c46a6b65-2a14-481c-8cdf-4fa4df251262",
            "sourceColumn": "ID Class",
            "summarizeBy": "none"
          },
          {
            "name": "Errors Factors",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "845bd00a-4179-4c65-947e-273e4e653e4a",
            "sourceColumn": "Errors Factors",
            "summarizeBy": "none"
          }
        ],
        "lineageTag": "1db72cf6-a6fb-4ca7-b99c-08e4160cff8a",
        "partitions": [
          {
            "name": "Car performance",
            "mode": "import",
            "source": {
              "expression": [
                "let",
                "    Source = Excel.Workbook(File.Contents(\"C:\\Users\\boudl\\Documents\\Projet Dekra\\PBI_AUTO.github.io\\Projet Dekra\\Test-data.xlsx\"), null, true),",
                "    data_Sheet = Source{[Item=\"data\",Kind=\"Sheet\"]}[Data],",
                "    #\"Promoted Headers\" = Table.PromoteHeaders(data_Sheet, [PromoteAllScalars=true]),",
                "    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"Torque\", Int64.Type}, {\"HP\", Int64.Type}, {\"Performance Indicator\", Int64.Type}, {\"Class\", type text}, {\"MODELS\", type text}, {\"Brand\", type text}, {\"Year\", Int64.Type}, {\"Weight\", Int64.Type}, {\"Wt/HP Ratio\", type number}, {\"Engine position\", type text}, {\"Drive\", type text}, {\"Cylinder\", type text}, {\"Country\", type text}, {\"0-60 Sec\", type number}, {\"0-100 Sec\", type number}, {\"Top Speed\", type number}, {\"60-0 Feet\", type number}, {\"100-0 Feet\", type number}}),",
                "    #\"Replaced Value Performance\" = Table.ReplaceValue(#\"Changed Type1\",null,0,Replacer.ReplaceValue,{\"Performance Indicator\"}),",
                "    #\"Replaced Value Torque\" = Table.ReplaceValue(#\"Replaced Value Performance\",null,0,Replacer.ReplaceValue,{\"Torque\"}),",
                "    #\"Replaced Value\" = Table.ReplaceValue(#\"Replaced Value Torque\",null,0,Replacer.ReplaceValue,{\"HP\"}),",
                "    #\"Replaced Value Weight\" = Table.ReplaceValue(#\"Replaced Value\",null,0,Replacer.ReplaceValue,{\"Weight\"}),",
                "    #\"Added Column Errors Factors\" = Table.AddColumn(#\"Replaced Value Weight\", \"Errors Factors\", each let",
                "    YearCheck = if not (Value.Is([Year], type number) and [Year] <= Date.Year(DateTime.LocalNow())) then \"Année invalide\" else null,",
                "    ClassCheck = if Text.Length([Class]) > 2 then \"Class contient plus de 2 lettres\" else null,",
                "    PerfCheck = if not Value.Is([Performance Indicator], type number) or [Performance Indicator]=0 then \"Performance Indicator invalide\" else null,",
                "    HPCheck = if not Value.Is([HP], type number) or [HP]=0 then \"HP invalide\" else null,",
                "    TorqueCheck = if not Value.Is([Torque], type number) or [Torque]=0 then \"Torque invalide\" else null,",
                "    WeightCheck = if not Value.Is([Weight], type number) or [Weight]=0 then \"Weight invalide\" else null,",
                "    WtHPCheck = if not Value.Is([#\"Wt/HP Ratio\"], type number) then \"Wt/HP Ratio invalide\" else null,",
                "    EnginePosCheck = if not (Value.Is([Engine position], type text)) then \"Engine position invalide\" else null,",
                "    DriveCheck = if not Value.Is([Drive], type text) or Text.Length([Drive]) <> 1 then \"Drive invalide\" else null,",
                "    Sec60Check = if not Value.Is([#\"0-60 Sec\"], type number) then \"0-60 Sec invalide\" else null,",
                "    Sec100Check = if not Value.Is([#\"0-100 Sec\"], type number) then \"0-100 Sec invalide\" else null,",
                "    SpeedCheck = if not Value.Is([Top Speed], type number) then \"Top Speed invalide\" else null,",
                "    Feet60Check = if not Value.Is([#\"60-0 Feet\"], type number) then \"60-0 Feet invalide\" else null,",
                "    Feet100Check = if not Value.Is([#\"100-0 Feet\"], type number) then \"100-0 Feet invalide\" else null,",
                "    G60Check = if not Value.Is([#\"60mph g's\"], type number) then \"60mph g's invalide\" else null,",
                "    G100Check = if not Value.Is([#\"100mph g's\"], type number) then \"100mph g's invalide\" else null,",
                "    Sec60100Check = if not Value.Is([#\"60-100 sec\"], type number) then \"60-100 sec invalide\" else null,",
                "    Erreur = Text.Combine(List.RemoveNulls({YearCheck, ClassCheck, PerfCheck, HPCheck, TorqueCheck, WeightCheck, WtHPCheck, EnginePosCheck, DriveCheck, Sec60Check, Sec100Check, SpeedCheck, Feet60Check, Feet100Check, G60Check, G100Check, Sec60100Check}), \", \")",
                "in",
                "    Erreur),",
                "    #\"Changed Type2\" = Table.TransformColumnTypes(#\"Added Column Errors Factors\",{{\"Errors Factors\", type text}, {\"60mph g's\", type number}, {\"100mph g's\", type number}, {\"60-100 sec\", type number}}),",
                "    #\"Changed Type3\" = Table.TransformColumnTypes(#\"Changed Type2\",{{\"0-100 Sec\", type number}}),",
                "    // Création colonne Index",
                "    #\"Added column Index\" = Table.AddIndexColumn(#\"Changed Type3\", \"Index\", 1, 1, Int64.Type),",
                "    // Positionnement de la colonne en 1er",
                "    #\"Reordered Column Index\" = Table.ReorderColumns(#\"Added column Index\",{\"Index\", \"Year\", \"Brand\", \"MODELS\", \"Class\", \"Performance Indicator\", \"HP\", \"Torque\", \"Weight\", \"Wt/HP Ratio\", \"Engine position\", \"Drive\", \"Cylinder\", \"Country\", \"0-60 Sec\", \"0-100 Sec\", \"Top Speed\", \"60-0 Feet\", \"100-0 Feet\", \"60mph g's\", \"100mph g's\", \"60-100 sec\"}),",
                "    // Renommage de la colonne Index en ID",
                "    #\"Renamed Column Index => ID\" = Table.RenameColumns(#\"Reordered Column Index\",{{\"Index\", \"ID\"}}),",
                "    #\"Added column ID Model\" = Table.AddColumn(#\"Renamed Column Index => ID\", \"ID Model\", each Text.PadStart(Text.From([Year]) & \"_\" & Text.Start([Brand], 1) & \"_\" & Text.Combine(List.Transform(Text.Split([MODELS], \" \"), each Text.Start(_, 3)), \"\") & \"_\" & ",
                "    Text.From([HP]) & \"_\" & ",
                "    Text.From([Torque]) & \"_\" & ",
                "    Text.From([Weight]), ",
                "    15, \"0\"",
                ")),",
                "    #\"Merged Queries\" = Table.NestedJoin(#\"Added column ID Model\", {\"Brand\"}, Brand, {\"Brand\"}, \"Brand.1\", JoinKind.LeftOuter),",
                "    #\"Expanded ID Brand\" = Table.ExpandTableColumn(#\"Merged Queries\", \"Brand.1\", {\"ID Brand\"}, {\"Brand.1.ID Brand\"}),",
                "    // Brand.1.ID Brand => ID Brand",
                "    #\"Renamed Columns\" = Table.RenameColumns(#\"Expanded ID Brand\",{{\"Brand.1.ID Brand\", \"ID Brand\"}}),",
                "    #\"Changed Type4\" = Table.TransformColumnTypes(#\"Renamed Columns\",{{\"ID Brand\", type text}}),",
                "    #\"Removed Column Brand\" = Table.RemoveColumns(#\"Changed Type4\",{\"Brand\"}),",
                "    #\"Reordered Columns ID Model\" = Table.ReorderColumns(#\"Removed Column Brand\",{\"ID\", \"ID Model\", \"ID Brand\", \"Year\", \"MODELS\", \"Class\", \"Performance Indicator\", \"HP\", \"Torque\", \"Weight\", \"Wt/HP Ratio\", \"Engine position\", \"Drive\", \"Cylinder\", \"Country\", \"0-60 Sec\", \"0-100 Sec\", \"Top Speed\", \"60-0 Feet\", \"100-0 Feet\", \"60mph g's\", \"100mph g's\", \"60-100 sec\"}),",
                "    #\"Changed Type5\" = Table.TransformColumnTypes(#\"Reordered Columns ID Model\",{{\"ID Model\", type text}}),",
                "    // Class => ID Class",
                "    #\"Renamed Column Class\" = Table.RenameColumns(#\"Changed Type5\",{{\"Class\", \"ID Class\"}}),",
                "    #\"Removed Column of Model\" = Table.RemoveColumns(#\"Renamed Column Class\",{\"ID\", \"Year\", \"MODELS\", \"HP\", \"Torque\", \"Weight\", \"Wt/HP Ratio\", \"Engine position\", \"Drive\", \"Cylinder\", \"Country\"}),",
                "    #\"Reordered Column Errors Factors\" = Table.ReorderColumns(#\"Removed Column of Model\",{\"ID Model\", \"ID Brand\", \"ID Class\", \"Performance Indicator\", \"0-60 Sec\", \"0-100 Sec\", \"Top Speed\", \"60-0 Feet\", \"100-0 Feet\", \"60mph g's\", \"100mph g's\", \"60-100 sec\", \"Errors Factors\"}),",
                "    #\"Filtered Rows Complete Data\" = Table.SelectRows(#\"Reordered Column Errors Factors\", each ([Errors Factors] = \"\"))",
                "in",
                "    #\"Filtered Rows Complete Data\""
              ],
              "type": "m"
            }
          }
        ]
      },
      {
        "name": "Brand",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "columns": [
          {
            "name": "Brand",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "c6d4f87c-da07-471e-ad48-6eeb19c4b074",
            "sourceColumn": "Brand",
            "summarizeBy": "none"
          },
          {
            "name": "Country",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "e8723fe7-70e4-4534-a193-627506db2e86",
            "sourceColumn": "Country",
            "summarizeBy": "none"
          },
          {
            "name": "Index",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "764ac228-7013-4079-8520-52345f3d763d",
            "sourceColumn": "Index",
            "summarizeBy": "none"
          },
          {
            "name": "ID Brand",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "31ef459d-6b3f-457a-85ff-1944489ece01",
            "sourceColumn": "ID Brand",
            "summarizeBy": "none"
          }
        ],
        "lineageTag": "bbcd9fdc-a64b-42bf-9cfd-fd4674492490",
        "partitions": [
          {
            "name": "Brand",
            "mode": "import",
            "source": {
              "expression": [
                "let",
                "    Source = Excel.Workbook(File.Contents(\"C:\\Users\\boudl\\Documents\\Projet Dekra\\PBI_AUTO.github.io\\Projet Dekra\\Test-data.xlsx\"), null, true),",
                "    data_Sheet = Source{[Item=\"data\",Kind=\"Sheet\"]}[Data],",
                "    #\"Promoted Headers\" = Table.PromoteHeaders(data_Sheet, [PromoteAllScalars=true]),",
                "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"Year\", Int64.Type}, {\"Brand\", type text}, {\"MODELS\", type any}, {\"Class\", type text}, {\"Performance Indicator\", Int64.Type}, {\"HP\", Int64.Type}, {\"Torque\", Int64.Type}, {\"Weight\", Int64.Type}, {\"Wt/HP Ratio\", type number}, {\"Engine position\", type text}, {\"Drive\", type text}, {\"Cylinder\", type any}, {\"Country\", type text}, {\"0-60 Sec\", type any}, {\"0-100 Sec\", type any}, {\"Top Speed\", type number}, {\"60-0 Feet\", type any}, {\"100-0 Feet\", type any}, {\"60mph g's\", type number}, {\"100mph g's\", type number}, {\"60-100 sec\", type any}}),",
                "    // Création colonne Index",
                "    #\"Added column Index\" = Table.AddIndexColumn(#\"Changed Type\", \"Index\", 1, 1, Int64.Type),",
                "    // Positionnement de la colonne en 1er",
                "    #\"Reordered Column Index\" = Table.ReorderColumns(#\"Added column Index\",{\"Index\", \"Year\", \"Brand\", \"MODELS\", \"Class\", \"Performance Indicator\", \"HP\", \"Torque\", \"Weight\", \"Wt/HP Ratio\", \"Engine position\", \"Drive\", \"Cylinder\", \"Country\", \"0-60 Sec\", \"0-100 Sec\", \"Top Speed\", \"60-0 Feet\", \"100-0 Feet\", \"60mph g's\", \"100mph g's\", \"60-100 sec\"}),",
                "    // Renommage de la colonne Index en ID",
                "    #\"Renamed Column Index => ID\" = Table.RenameColumns(#\"Reordered Column Index\",{{\"Index\", \"ID\"}}),",
                "    #\"Added column ID Model\" = Table.AddColumn(#\"Renamed Column Index => ID\", \"ID Model\", each Text.PadStart(Text.From([Year]) & \"_\" & [Brand] & \"_\" & Text.From([MODELS]) & \"_\" & Text.From([HP]) & \"_\" & Text.From([Torque]), 15, \"0\")),",
                "    // Copie de la table de fait, suppression de colonne pour garder les colonnes nécessaire à la table de dimension \"Brand\"",
                "    #\"Removed Other Columns\" = Table.SelectColumns(#\"Added column ID Model\",{\"Brand\", \"Country\"}),",
                "    #\"Removed Duplicates\" = Table.Distinct(#\"Removed Other Columns\", {\"Brand\"}),",
                "    #\"Added Index\" = Table.AddIndexColumn(#\"Removed Duplicates\", \"Index\", 1, 1, Int64.Type),",
                "    #\"Added Column ID Brand\" = Table.AddColumn(#\"Added Index\", \"ID Brand\", each Text.Upper(Text.Start([Brand], 1)) & Text.PadStart(Text.From([Index]), 3, \"0\")),",
                "    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Added Column ID Brand\",{{\"ID Brand\", type text}})",
                "in",
                "    #\"Changed Type1\""
              ],
              "type": "m"
            }
          }
        ]
      },
      {
        "name": "Model",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "columns": [
          {
            "name": "ID Brand",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "8cb7657a-c3e4-416d-a085-36c52e92cdb9",
            "sourceColumn": "ID Brand",
            "summarizeBy": "none"
          },
          {
            "name": "ID Model",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "f9249790-5e10-494c-83a3-fa8cb9a4d634",
            "sourceColumn": "ID Model",
            "summarizeBy": "none"
          },
          {
            "name": "MODELS",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "201826fc-19ad-456c-975e-e243fa50d0d9",
            "sourceColumn": "MODELS",
            "summarizeBy": "none"
          },
          {
            "name": "Year",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "9581b568-dbfa-4753-accf-ef8a8bc93c8b",
            "sourceColumn": "Year",
            "summarizeBy": "sum"
          },
          {
            "name": "HP",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "double",
            "formatString": "0",
            "lineageTag": "ab44a238-d790-4915-90c5-9f3605ddcf10",
            "sourceColumn": "HP",
            "summarizeBy": "sum"
          },
          {
            "name": "Torque",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "double",
            "formatString": "0",
            "lineageTag": "76e1ffad-c835-4f7e-b972-05f239cc2ae8",
            "sourceColumn": "Torque",
            "summarizeBy": "sum"
          },
          {
            "name": "Weight",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "double",
            "formatString": "0",
            "lineageTag": "9608d5bd-fb23-4a8d-9e1c-cfbf013c3acd",
            "sourceColumn": "Weight",
            "summarizeBy": "sum"
          },
          {
            "name": "Wt/HP Ratio",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "dataType": "double",
            "lineageTag": "62da96a5-4c38-4a62-8589-e9ee517b2c41",
            "sourceColumn": "Wt/HP Ratio",
            "summarizeBy": "sum"
          },
          {
            "name": "Engine position",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "cd43bba2-ebd2-48c7-9533-1a06892c3274",
            "sourceColumn": "Engine position",
            "summarizeBy": "none"
          },
          {
            "name": "Drive",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "878d794c-fa88-4cb9-bf08-97480dc44b14",
            "sourceColumn": "Drive",
            "summarizeBy": "none"
          },
          {
            "name": "Cylinder",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "7df061fa-616e-4887-87c4-3b029b521e2d",
            "sourceColumn": "Cylinder",
            "summarizeBy": "none"
          }
        ],
        "lineageTag": "f2e15083-880a-4cde-84a5-8bc7e96fd993",
        "partitions": [
          {
            "name": "Model",
            "mode": "import",
            "source": {
              "expression": [
                "let",
                "    Source = Excel.Workbook(File.Contents(\"C:\\Users\\boudl\\Documents\\Projet Dekra\\PBI_AUTO.github.io\\Projet Dekra\\Test-data.xlsx\"), null, true),",
                "    data_Sheet = Source{[Item=\"data\",Kind=\"Sheet\"]}[Data],",
                "    #\"Promoted Headers\" = Table.PromoteHeaders(data_Sheet, [PromoteAllScalars=true]),",
                "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"Year\", Int64.Type}, {\"Brand\", type text}, {\"MODELS\", type any}, {\"Class\", type text}, {\"Performance Indicator\", Int64.Type}, {\"HP\", Int64.Type}, {\"Torque\", Int64.Type}, {\"Weight\", Int64.Type}, {\"Wt/HP Ratio\", type number}, {\"Engine position\", type text}, {\"Drive\", type text}, {\"Cylinder\", type any}, {\"Country\", type text}, {\"0-60 Sec\", type any}, {\"0-100 Sec\", type any}, {\"Top Speed\", type number}, {\"60-0 Feet\", type any}, {\"100-0 Feet\", type any}, {\"60mph g's\", type number}, {\"100mph g's\", type number}, {\"60-100 sec\", type any}}),",
                "    #\"Replaced Value HP\" = Table.ReplaceValue(#\"Changed Type\",null,0,Replacer.ReplaceValue,{\"HP\"}),",
                "    #\"Replaced Value Torque\" = Table.ReplaceValue(#\"Replaced Value HP\",null,0,Replacer.ReplaceValue,{\"Torque\"}),",
                "    #\"Replaced Value Weight\" = Table.ReplaceValue(#\"Replaced Value Torque\",null,0,Replacer.ReplaceValue,{\"Weight\"}),",
                "    #\"Added Errors Factors\" = Table.AddColumn(#\"Replaced Value Weight\", \"Errors Factors\", each let",
                "    YearCheck = if not (Value.Is([Year], type number) and [Year] <= Date.Year(DateTime.LocalNow())) then \"Année invalide\" else null,",
                "    ClassCheck = if Text.Length([Class]) > 2 then \"Class contient plus de 2 lettres\" else null,",
                "    PerfCheck = if not Value.Is([Performance Indicator], type number) or [Performance Indicator]=0 then \"Performance Indicator invalide\" else null,",
                "    HPCheck = if not Value.Is([HP], type number) or [HP]=0 then \"HP invalide\" else null,",
                "    TorqueCheck = if not Value.Is([Torque], type number) or [Torque]=0 then \"Torque invalide\" else null,",
                "    WeightCheck = if not Value.Is([Weight], type number) or [Weight]=0 then \"Weight invalide\" else null,",
                "    WtHPCheck = if not Value.Is([#\"Wt/HP Ratio\"], type number) then \"Wt/HP Ratio invalide\" else null,",
                "    EnginePosCheck = if not (Value.Is([Engine position], type text)) then \"Engine position invalide\" else null,",
                "    DriveCheck = if not Value.Is([Drive], type text) or Text.Length([Drive]) <> 1 then \"Drive invalide\" else null,",
                "    Sec60Check = if not Value.Is([#\"0-60 Sec\"], type number) then \"0-60 Sec invalide\" else null,",
                "    Sec100Check = if not Value.Is([#\"0-100 Sec\"], type number) then \"0-100 Sec invalide\" else null,",
                "    SpeedCheck = if not Value.Is([Top Speed], type number) then \"Top Speed invalide\" else null,",
                "    Feet60Check = if not Value.Is([#\"60-0 Feet\"], type number) then \"60-0 Feet invalide\" else null,",
                "    Feet100Check = if not Value.Is([#\"100-0 Feet\"], type number) then \"100-0 Feet invalide\" else null,",
                "    G60Check = if not Value.Is([#\"60mph g's\"], type number) then \"60mph g's invalide\" else null,",
                "    G100Check = if not Value.Is([#\"100mph g's\"], type number) then \"100mph g's invalide\" else null,",
                "    Sec60100Check = if not Value.Is([#\"60-100 sec\"], type number) then \"60-100 sec invalide\" else null,",
                "    Erreur = Text.Combine(List.RemoveNulls({YearCheck, ClassCheck, PerfCheck, HPCheck, TorqueCheck, WeightCheck, WtHPCheck, EnginePosCheck, DriveCheck, Sec60Check, Sec100Check, SpeedCheck, Feet60Check, Feet100Check, G60Check, G100Check, Sec60100Check}), \", \")",
                "in",
                "    Erreur),",
                "    #\"Changed Type Errors Factors\" = Table.TransformColumnTypes(#\"Added Errors Factors\",{{\"Errors Factors\", type text}}),",
                "    // Filtrer sur les ligne Blank de Factor Errors pour avoir toute les données complète et valide",
                "    #\"Filtered Rows\" = Table.SelectRows(#\"Changed Type Errors Factors\", each ([Errors Factors] = \"\")),",
                "    // Création colonne Index",
                "    #\"Added column Index\" = Table.AddIndexColumn(#\"Filtered Rows\", \"Index\", 1, 1, Int64.Type),",
                "    // Positionnement de la colonne en 1er",
                "    #\"Reordered Column Index\" = Table.ReorderColumns(#\"Added column Index\",{\"Index\", \"Year\", \"Brand\", \"MODELS\", \"Class\", \"Performance Indicator\", \"HP\", \"Torque\", \"Weight\", \"Wt/HP Ratio\", \"Engine position\", \"Drive\", \"Cylinder\", \"Country\", \"0-60 Sec\", \"0-100 Sec\", \"Top Speed\", \"60-0 Feet\", \"100-0 Feet\", \"60mph g's\", \"100mph g's\", \"60-100 sec\"}),",
                "    // Renommage de la colonne Index en ID",
                "    #\"Renamed Column Index => ID\" = Table.RenameColumns(#\"Reordered Column Index\",{{\"Index\", \"ID\"}}),",
                "    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Renamed Column Index => ID\",{{\"MODELS\", type text}}),",
                "    #\"Added column ID Model\" = Table.AddColumn(#\"Changed Type1\", \"ID Model\", each Text.PadStart(Text.From([Year]) & \"_\" & Text.Start([Brand], 1) & \"_\" & Text.Combine(List.Transform(Text.Split([MODELS], \" \"), each Text.Start(_, 3)), \"\") & \"_\" & ",
                "    Text.From([HP]) & \"_\" & ",
                "    Text.From([Torque]) & \"_\" & ",
                "    Text.From([Weight]), ",
                "    15, \"0\"",
                ")),",
                "    // Pour ajouter la colonne ID Brand à la table de fait (avec la correspondance des colonnes Brand)",
                "    #\"Merged Queries\" = Table.NestedJoin(#\"Added column ID Model\", {\"Brand\"}, Brand, {\"Brand\"}, \"Brand.1\", JoinKind.LeftOuter),",
                "    #\"Expanded ID Brand\" = Table.ExpandTableColumn(#\"Merged Queries\", \"Brand.1\", {\"ID Brand\"}, {\"Brand.1.ID Brand\"}),",
                "    // Brand.1.ID Brand => ID Brand",
                "    #\"Renamed Column ID Brand\" = Table.RenameColumns(#\"Expanded ID Brand\",{{\"Brand.1.ID Brand\", \"ID Brand\"}}),",
                "    #\"Changed Type2\" = Table.TransformColumnTypes(#\"Renamed Column ID Brand\",{{\"ID Brand\", type text}}),",
                "    #\"Removed Column Brand\" = Table.RemoveColumns(#\"Changed Type2\",{\"Brand\"}),",
                "    // Placement des colonnes ID Brand, ID Model en deuxième et troisième position",
                "    #\"Reordered Column ID Brand, ID Model\" = Table.ReorderColumns(#\"Removed Column Brand\",{\"ID\", \"ID Brand\", \"ID Model\", \"Year\", \"MODELS\", \"Class\", \"Performance Indicator\", \"HP\", \"Torque\", \"Weight\", \"Wt/HP Ratio\", \"Engine position\", \"Drive\", \"Cylinder\", \"Country\", \"0-60 Sec\", \"0-100 Sec\", \"Top Speed\", \"60-0 Feet\", \"100-0 Feet\", \"60mph g's\", \"100mph g's\", \"60-100 sec\"}),",
                "    #\"Removed Other Columns\" = Table.SelectColumns(#\"Reordered Column ID Brand, ID Model\",{\"ID Brand\", \"ID Model\", \"MODELS\", \"Year\", \"HP\", \"Torque\", \"Weight\", \"Wt/HP Ratio\", \"Engine position\", \"Drive\", \"Cylinder\"}),",
                "    #\"Changed Type3\" = Table.TransformColumnTypes(#\"Removed Other Columns\",{{\"ID Model\", type text}, {\"MODELS\", type text}}),",
                "    #\"Removed Duplicates\" = Table.Distinct(#\"Changed Type3\", {\"ID Model\"}),",
                "    #\"Replaced Value Null => Not defined\" = Table.ReplaceValue(#\"Removed Duplicates\",null,\"not defined\",Replacer.ReplaceValue,{\"ID Model\"}),",
                "    #\"Replaced Engine P Value1\" = Table.ReplaceValue(#\"Replaced Value Null => Not defined\",\"F\",\"Front\",Replacer.ReplaceText,{\"Engine position\"}),",
                "    #\"Replaced Engine P Value2\" = Table.ReplaceValue(#\"Replaced Engine P Value1\",\"R\",\"Rear\",Replacer.ReplaceText,{\"Engine position\"}),",
                "    #\"Replaced Engine P Value3\" = Table.ReplaceValue(#\"Replaced Engine P Value2\",\"M\",\"Middle\",Replacer.ReplaceText,{\"Engine position\"}),",
                "    #\"Replaced Drive Value1\" = Table.ReplaceValue(#\"Replaced Engine P Value3\",\"A\",\"All wheel drive\",Replacer.ReplaceText,{\"Drive\"}),",
                "    #\"Replaced Drive Value2\" = Table.ReplaceValue(#\"Replaced Drive Value1\",\"R\",\"Rear wheel drive\",Replacer.ReplaceText,{\"Drive\"}),",
                "    #\"Replaced Drive Value3\" = Table.ReplaceValue(#\"Replaced Drive Value2\",\"F\",\"Front wheel drive\",Replacer.ReplaceText,{\"Drive\"}),",
                "    #\"Changed Type4\" = Table.TransformColumnTypes(#\"Replaced Drive Value3\",{{\"Cylinder\", type text}})",
                "in",
                "    #\"Changed Type4\""
              ],
              "type": "m"
            }
          }
        ]
      },
      {
        "name": "Car Category",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "columns": [
          {
            "name": "ID Class",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "be726d02-e736-4cd6-895c-dff476ae0dd3",
            "sourceColumn": "ID Class",
            "summarizeBy": "none"
          },
          {
            "name": "Performance Categoy Car",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "014dcfcb-d415-4504-bc6a-0f44f69fabb2",
            "sourceColumn": "Performance Categoy Car",
            "summarizeBy": "none"
          },
          {
            "name": "Class",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "e983ec95-fa43-442a-8da0-64a8c1333bf3",
            "sourceColumn": "Class",
            "summarizeBy": "none"
          }
        ],
        "lineageTag": "ee4bf580-0852-4ccc-bf69-bbdb4804f67b",
        "partitions": [
          {
            "name": "Car Category",
            "mode": "import",
            "source": {
              "expression": [
                "let",
                "    Source = Excel.Workbook(File.Contents(\"C:\\Users\\boudl\\Documents\\Projet Dekra\\PBI_AUTO.github.io\\Projet Dekra\\Test-data.xlsx\"), null, true),",
                "    data_Sheet = Source{[Item=\"data\",Kind=\"Sheet\"]}[Data],",
                "    #\"Promoted Headers\" = Table.PromoteHeaders(data_Sheet, [PromoteAllScalars=true]),",
                "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"Year\", Int64.Type}, {\"Brand\", type text}, {\"MODELS\", type any}, {\"Class\", type text}, {\"Performance Indicator\", Int64.Type}, {\"HP\", Int64.Type}, {\"Torque\", Int64.Type}, {\"Weight\", Int64.Type}, {\"Wt/HP Ratio\", type number}, {\"Engine position\", type text}, {\"Drive\", type text}, {\"Cylinder\", type any}, {\"Country\", type text}, {\"0-60 Sec\", type any}, {\"0-100 Sec\", type any}, {\"Top Speed\", type number}, {\"60-0 Feet\", type any}, {\"100-0 Feet\", type any}, {\"60mph g's\", type number}, {\"100mph g's\", type number}, {\"60-100 sec\", type any}}),",
                "    // Création colonne Index",
                "    #\"Added column Index\" = Table.AddIndexColumn(#\"Changed Type\", \"Index\", 1, 1, Int64.Type),",
                "    // Positionnement de la colonne en 1er",
                "    #\"Reordered Columns\" = Table.ReorderColumns(#\"Added column Index\",{\"Index\", \"Year\", \"Brand\", \"MODELS\", \"Class\", \"Performance Indicator\", \"HP\", \"Torque\", \"Weight\", \"Wt/HP Ratio\", \"Engine position\", \"Drive\", \"Cylinder\", \"Country\", \"0-60 Sec\", \"0-100 Sec\", \"Top Speed\", \"60-0 Feet\", \"100-0 Feet\", \"60mph g's\", \"100mph g's\", \"60-100 sec\"}),",
                "    // Renommage de la colonne Index en ID",
                "    #\"Renamed Column Index => ID\" = Table.RenameColumns(#\"Reordered Columns\",{{\"Index\", \"ID\"}}),",
                "    #\"Added column ID Model\" = Table.AddColumn(#\"Renamed Column Index => ID\", \"ID Model\", each Text.PadStart(Text.From([Year]) & \"_\" & Text.Start([Brand], 1) & \"_\" & Text.Combine(List.Transform(Text.Split([MODELS], \" \"), each Text.Start(_, 3)), \"\") & \"_\" & ",
                "    Text.From([HP]) & \"_\" & ",
                "    Text.From([Torque]) & \"_\" & ",
                "    Text.From([Weight]), ",
                "    15, \"0\"",
                ")),",
                "    #\"Merged Queries\" = Table.NestedJoin(#\"Added column ID Model\", {\"Brand\"}, Brand, {\"Brand\"}, \"Brand.1\", JoinKind.LeftOuter),",
                "    #\"Expanded ID Brand\" = Table.ExpandTableColumn(#\"Merged Queries\", \"Brand.1\", {\"ID Brand\"}, {\"Brand.1.ID Brand\"}),",
                "    #\"Renamed Column ID Brand\" = Table.RenameColumns(#\"Expanded ID Brand\",{{\"Brand.1.ID Brand\", \"ID Brand\"}}),",
                "    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Renamed Column ID Brand\",{{\"ID Brand\", type text}}),",
                "    #\"Removed Column Brand\" = Table.RemoveColumns(#\"Changed Type1\",{\"Brand\"}),",
                "    #\"Reordered Column ID Brand, ID Model\" = Table.ReorderColumns(#\"Removed Column Brand\",{\"ID\", \"ID Model\", \"ID Brand\", \"Year\", \"MODELS\", \"Class\", \"Performance Indicator\", \"HP\", \"Torque\", \"Weight\", \"Wt/HP Ratio\", \"Engine position\", \"Drive\", \"Cylinder\", \"Country\", \"0-60 Sec\", \"0-100 Sec\", \"Top Speed\", \"60-0 Feet\", \"100-0 Feet\", \"60mph g's\", \"100mph g's\", \"60-100 sec\"}),",
                "    #\"Changed Type2\" = Table.TransformColumnTypes(#\"Reordered Column ID Brand, ID Model\",{{\"ID Model\", type text}}),",
                "    // Keep Column Class",
                "    #\"Removed Other Columns\" = Table.SelectColumns(#\"Changed Type2\",{\"Class\"}),",
                "    #\"Removed Duplicates\" = Table.Distinct(#\"Removed Other Columns\"),",
                "    #\"Renamed Column Class => ID Class\" = Table.RenameColumns(#\"Removed Duplicates\",{{\"Class\", \"ID Class\"}}),",
                "    #\"Added Column Class\" = Table.AddColumn(#\"Renamed Column Class => ID Class\", \"Class\", each if List.Contains({\"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\",\"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\"}, Text.Upper([ID Class])) then ",
                "    \"Street Cars\"",
                "else if List.Contains({\"R1\", \"R2\", \"R3\", \"R4\"}, Text.Upper([ID Class])) then ",
                "    \"Racing Cars\"",
                "else ",
                "    \"Autres\"),",
                "    #\"Changed Type3\" = Table.TransformColumnTypes(#\"Added Column Class\",{{\"Class\", type text}}),",
                "    #\"Added Column Performance Category Car\" = Table.AddColumn(#\"Changed Type3\", \"Performance Categoy Car\", each if [Class] = \"Street Cars\" then",
                "    if [ID Class] = \"E\" then \"Low performance car\"",
                "    else if [ID Class] = \"X\" then \"High performance car\"",
                "    else \"Medium performance car\"",
                "else if [Class] = \"Racing Cars\" then",
                "    if [ID Class] = \"R4\" then \"Low performance racing car\"",
                "    else if [ID Class] = \"R1\" then \"High Performance racing car\"",
                "    else \"Medium performance racing car\"",
                "else",
                "    \"Autres\"),",
                "    #\"Changed Type4\" = Table.TransformColumnTypes(#\"Added Column Performance Category Car\",{{\"Performance Categoy Car\", type text}})",
                "in",
                "    #\"Changed Type4\""
              ],
              "type": "m"
            }
          }
        ]
      },
      {
        "name": "Incomplete car data",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "columns": [
          {
            "name": "ID Model",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "bff396af-7890-42be-b9d9-7952d8dbe6e4",
            "sourceColumn": "ID Model",
            "summarizeBy": "none"
          },
          {
            "name": "ID Brand",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "11782746-1d3b-4955-b6bc-a95646f7b435",
            "sourceColumn": "ID Brand",
            "summarizeBy": "none"
          },
          {
            "name": "ID Class",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "68294b0b-c9e0-4584-8942-315afe08e6e5",
            "sourceColumn": "ID Class",
            "summarizeBy": "none"
          },
          {
            "name": "Performance Indicator",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "937e212f-b1f6-4c6f-b063-7750afd103f3",
            "sourceColumn": "Performance Indicator",
            "summarizeBy": "sum"
          },
          {
            "name": "0-60 Sec",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "dataType": "double",
            "lineageTag": "5a7762ec-2ca2-4baf-a46e-0fde2722245b",
            "sourceColumn": "0-60 Sec",
            "summarizeBy": "sum"
          },
          {
            "name": "0-100 Sec",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "dataType": "double",
            "lineageTag": "ea13f696-7962-46a7-9e57-53a8b69fbb37",
            "sourceColumn": "0-100 Sec",
            "summarizeBy": "sum"
          },
          {
            "name": "Top Speed",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "dataType": "double",
            "lineageTag": "84b92ea6-e44f-4c6e-ae66-b129efa8207d",
            "sourceColumn": "Top Speed",
            "summarizeBy": "sum"
          },
          {
            "name": "60-0 Feet",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "dataType": "double",
            "lineageTag": "9735167f-ecdc-42bb-9aa6-e4816e921c96",
            "sourceColumn": "60-0 Feet",
            "summarizeBy": "sum"
          },
          {
            "name": "100-0 Feet",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "dataType": "double",
            "lineageTag": "d257e985-f573-4ebc-8c3e-76c77abb94ec",
            "sourceColumn": "100-0 Feet",
            "summarizeBy": "sum"
          },
          {
            "name": "60mph g's",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "dataType": "double",
            "lineageTag": "8c777f73-8eb5-4c0a-aaf3-c8745bb96ffe",
            "sourceColumn": "60mph g's",
            "summarizeBy": "sum"
          },
          {
            "name": "100mph g's",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "dataType": "double",
            "lineageTag": "06f4b015-1dfc-4eb5-b843-687fa45f27e0",
            "sourceColumn": "100mph g's",
            "summarizeBy": "sum"
          },
          {
            "name": "60-100 sec",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "dataType": "double",
            "lineageTag": "7aac22e1-c1fc-42f1-bc40-ed48586d78dd",
            "sourceColumn": "60-100 sec",
            "summarizeBy": "sum"
          },
          {
            "name": "Errors Factors",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "41559f36-dd97-4f99-af76-85044eb4cbf7",
            "sourceColumn": "Errors Factors",
            "summarizeBy": "none"
          }
        ],
        "lineageTag": "e93e3fbc-1a29-4edc-8bd3-70067f0085eb",
        "partitions": [
          {
            "name": "Incomplete car data",
            "mode": "import",
            "source": {
              "expression": [
                "let",
                "    Source = Excel.Workbook(File.Contents(\"C:\\Users\\boudl\\Documents\\Projet Dekra\\PBI_AUTO.github.io\\Projet Dekra\\Test-data.xlsx\"), null, true),",
                "    data_Sheet = Source{[Item=\"data\",Kind=\"Sheet\"]}[Data],",
                "    #\"Promoted Headers\" = Table.PromoteHeaders(data_Sheet, [PromoteAllScalars=true]),",
                "    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"Torque\", Int64.Type}, {\"HP\", Int64.Type}, {\"Performance Indicator\", Int64.Type}, {\"Class\", type text}, {\"MODELS\", type text}, {\"Brand\", type text}, {\"Year\", Int64.Type}, {\"Weight\", Int64.Type}, {\"Wt/HP Ratio\", type number}, {\"Engine position\", type text}, {\"Drive\", type text}, {\"Cylinder\", type text}, {\"Country\", type text}, {\"0-60 Sec\", type number}, {\"0-100 Sec\", type number}, {\"Top Speed\", type number}, {\"60-0 Feet\", type number}, {\"100-0 Feet\", type number}}),",
                "    #\"Replaced Value HP\" = Table.ReplaceValue(#\"Changed Type1\",null,0,Replacer.ReplaceValue,{\"HP\"}),",
                "    #\"Replaced Value Torque\" = Table.ReplaceValue(#\"Replaced Value HP\",null,0,Replacer.ReplaceValue,{\"Torque\"}),",
                "    #\"Replaced Value Weight\" = Table.ReplaceValue(#\"Replaced Value Torque\",null,0,Replacer.ReplaceValue,{\"Weight\"}),",
                "    #\"Added Column Errors Factors\" = Table.AddColumn(#\"Replaced Value Weight\", \"Errors Factors\", each let",
                "    YearCheck = if not (Value.Is([Year], type number) and [Year] <= Date.Year(DateTime.LocalNow())) then \"Année invalide\" else null,",
                "    ClassCheck = if Text.Length([Class]) > 2 then \"Class contient plus de 2 lettres\" else null,",
                "    PerfCheck = if not Value.Is([Performance Indicator], type number) then \"Performance Indicator invalide\" else null,",
                "    HPCheck = if not Value.Is([HP], type number) or [HP]=0 then \"HP invalide\" else null,",
                "    TorqueCheck = if not Value.Is([Torque], type number) or [Torque]=0 then \"Torque invalide\" else null,",
                "    WeightCheck = if not Value.Is([Weight], type number) or [Weight]=0 then \"Weight invalide\" else null,",
                "    WtHPCheck = if not Value.Is([#\"Wt/HP Ratio\"], type number) then \"Wt/HP Ratio invalide\" else null,",
                "    EnginePosCheck = if not (Value.Is([Engine position], type text)) then \"Engine position invalide\" else null,",
                "    DriveCheck = if not Value.Is([Drive], type text) or Text.Length([Drive]) <> 1 then \"Drive invalide\" else null,",
                "    Sec60Check = if not Value.Is([#\"0-60 Sec\"], type number) then \"0-60 Sec invalide\" else null,",
                "    Sec100Check = if not Value.Is([#\"0-100 Sec\"], type number) then \"0-100 Sec invalide\" else null,",
                "    SpeedCheck = if not Value.Is([Top Speed], type number) then \"Top Speed invalide\" else null,",
                "    Feet60Check = if not Value.Is([#\"60-0 Feet\"], type number) then \"60-0 Feet invalide\" else null,",
                "    Feet100Check = if not Value.Is([#\"100-0 Feet\"], type number) then \"100-0 Feet invalide\" else null,",
                "    G60Check = if not Value.Is([#\"60mph g's\"], type number) then \"60mph g's invalide\" else null,",
                "    G100Check = if not Value.Is([#\"100mph g's\"], type number) then \"100mph g's invalide\" else null,",
                "    Sec60100Check = if not Value.Is([#\"60-100 sec\"], type number) then \"60-100 sec invalide\" else null,",
                "    Erreur = Text.Combine(List.RemoveNulls({YearCheck, ClassCheck, PerfCheck, HPCheck, TorqueCheck, WeightCheck, WtHPCheck, EnginePosCheck, DriveCheck, Sec60Check, Sec100Check, SpeedCheck, Feet60Check, Feet100Check, G60Check, G100Check, Sec60100Check}), \", \")",
                "in",
                "    Erreur),",
                "    #\"Changed Type2\" = Table.TransformColumnTypes(#\"Added Column Errors Factors\",{{\"Errors Factors\", type text}, {\"60mph g's\", type number}, {\"100mph g's\", type number}, {\"60-100 sec\", type number}}),",
                "    #\"Changed Type3\" = Table.TransformColumnTypes(#\"Changed Type2\",{{\"0-100 Sec\", type number}}),",
                "    // Création colonne Index",
                "    #\"Added column Index\" = Table.AddIndexColumn(#\"Changed Type3\", \"Index\", 1, 1, Int64.Type),",
                "    // Positionnement de la colonne en 1er",
                "    #\"Reordered Columns Index\" = Table.ReorderColumns(#\"Added column Index\",{\"Index\", \"Year\", \"Brand\", \"MODELS\", \"Class\", \"Performance Indicator\", \"HP\", \"Torque\", \"Weight\", \"Wt/HP Ratio\", \"Engine position\", \"Drive\", \"Cylinder\", \"Country\", \"0-60 Sec\", \"0-100 Sec\", \"Top Speed\", \"60-0 Feet\", \"100-0 Feet\", \"60mph g's\", \"100mph g's\", \"60-100 sec\"}),",
                "    // Renommage de la colonne Index en ID",
                "    #\"Renamed Column Index => ID\" = Table.RenameColumns(#\"Reordered Columns Index\",{{\"Index\", \"ID\"}}),",
                "    #\"Added column ID Model\" = Table.AddColumn(#\"Renamed Column Index => ID\", \"ID Model\", each Text.PadStart(Text.From([Year]) & \"_\" & Text.Start([Brand], 1) & \"_\" & Text.Combine(List.Transform(Text.Split([MODELS], \" \"), each Text.Start(_, 3)), \"\") & \"_\" & ",
                "    Text.From([HP]) & \"_\" & ",
                "    Text.From([Torque]) & \"_\" & ",
                "    Text.From([Weight]), ",
                "    15, \"0\"",
                ")),",
                "    #\"Merged Queries\" = Table.NestedJoin(#\"Added column ID Model\", {\"Brand\"}, Brand, {\"Brand\"}, \"Brand.1\", JoinKind.LeftOuter),",
                "    #\"Expanded ID Brand\" = Table.ExpandTableColumn(#\"Merged Queries\", \"Brand.1\", {\"ID Brand\"}, {\"Brand.1.ID Brand\"}),",
                "    #\"Renamed Columns\" = Table.RenameColumns(#\"Expanded ID Brand\",{{\"Brand.1.ID Brand\", \"ID Brand\"}}),",
                "    #\"Changed Type4\" = Table.TransformColumnTypes(#\"Renamed Columns\",{{\"ID Brand\", type text}}),",
                "    #\"Removed Column Brand\" = Table.RemoveColumns(#\"Changed Type4\",{\"Brand\"}),",
                "    #\"Reordered Column ID Model\" = Table.ReorderColumns(#\"Removed Column Brand\",{\"ID\", \"ID Model\", \"ID Brand\", \"Year\", \"MODELS\", \"Class\", \"Performance Indicator\", \"HP\", \"Torque\", \"Weight\", \"Wt/HP Ratio\", \"Engine position\", \"Drive\", \"Cylinder\", \"Country\", \"0-60 Sec\", \"0-100 Sec\", \"Top Speed\", \"60-0 Feet\", \"100-0 Feet\", \"60mph g's\", \"100mph g's\", \"60-100 sec\"}),",
                "    #\"Changed Type5\" = Table.TransformColumnTypes(#\"Reordered Column ID Model\",{{\"ID Model\", type text}}),",
                "    #\"Renamed Column Class\" = Table.RenameColumns(#\"Changed Type5\",{{\"Class\", \"ID Class\"}}),",
                "    #\"Removed Columns of Model\" = Table.RemoveColumns(#\"Renamed Column Class\",{\"ID\", \"Year\", \"MODELS\", \"HP\", \"Torque\", \"Weight\", \"Wt/HP Ratio\", \"Engine position\", \"Drive\", \"Cylinder\", \"Country\"}),",
                "    #\"Reordered Column Errors Factors\" = Table.ReorderColumns(#\"Removed Columns of Model\",{\"ID Model\", \"ID Brand\", \"ID Class\", \"Performance Indicator\", \"0-60 Sec\", \"0-100 Sec\", \"Top Speed\", \"60-0 Feet\", \"100-0 Feet\", \"60mph g's\", \"100mph g's\", \"60-100 sec\", \"Errors Factors\"}),",
                "    #\"Filtered Rows\" = Table.SelectRows(#\"Reordered Column Errors Factors\", each ([Errors Factors] <> \"\"))",
                "in",
                "    #\"Filtered Rows\""
              ],
              "type": "m"
            }
          }
        ]
      },
      {
        "name": "Table Mesure",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "columns": [
          {
            "name": "Column1",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "ccc8ce62-3f48-45da-a234-9ebb40e591c8",
            "sourceColumn": "Column1",
            "summarizeBy": "none"
          }
        ],
        "lineageTag": "95d613f8-860c-474e-8c2f-893884d95bc2",
        "partitions": [
          {
            "name": "Table Mesure",
            "mode": "import",
            "source": {
              "expression": [
                "let",
                "    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i44FAA==\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Column1 = _t]),",
                "    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Column1\", type text}})",
                "in",
                "    #\"Changed Type\""
              ],
              "type": "m"
            }
          }
        ]
      }
    ]
  }
}